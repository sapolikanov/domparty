df_enp <- merge(df, enp, by.x = c('year.x','ccodecow'),by.y = c('year','COWcode'), all.x = TRUE, all.y =TRUE)%>%
select(-v2panumbseat, -pf_party_id)%>%
distinct()
View(df_enp)
df_enp <- merge(df, enp, by.x = c('year.x','ccodecow'),by.y = c('year','COWcode'), all.x = FALSE, all.y =TRUE)%>%
select(-v2panumbseat, -pf_party_id)%>%
distinct()
enp <- v_party %>%
select(e_regionpol_6C, country_name, country_id, pf_party_id, year, v2panumbseat, COWcode) %>%
filter(e_regionpol_6C == 4, !is.na(v2panumbseat),year %in% c("2013","2014","2015", "2016", "2017", "2018"))%>%
group_by(country_id)%>%
slice_max(year)%>%
mutate(number_of_parties = length(country_id)) %>%
mutate(ENPP = electoral::enp(v2panumbseat))
df_enp <- merge(df, enp, by.x = c('year.x','ccodecow'),by.y = c('year','COWcode'), all.x = FALSE, all.y =TRUE)%>%
select(-v2panumbseat, -pf_party_id)%>%
distinct()
View(df_enp)
View(enp)
df_enp <- merge(df, enp, by.x = c('year.x','ccodecow'), by.y = c('year','COWcode'))%>%
select(-v2panumbseat, -pf_party_id)%>%
distinct()
library(dplyr)
library(foreign)
library(haven)
library(tidyr)
library(rlang)
library(nnet)
library(stargazer)
df_enp_m1 <- multinom(ENPP ~ ELF + PSI + housesys + col_legacy + dem + oil.x + edu, data = df_enp)
df_enp <- merge(df1, enp, by.x = c('year.x','ccodecow'), by.y = c('year','COWcode'))%>%
select(-v2panumbseat, -pf_party_id)%>%
distinct()
df_enp_m1 <- multinom(ENPP ~ ELF + PSI + housesys + col_legacy + dem + oil.x + edu, data = df_enp)
View(df1)
df_enp <- merge(df_col, enp, by.x = c('year.x','ccodecow'), by.y = c('year','COWcode'))%>%
select(-v2panumbseat, -pf_party_id)%>%
distinct()
View(df_col)
df_enp <- merge(df_col, enp, by.x = c('year.x','ccodecow'), by.y = c('year','COWcode'))%>%
select(-v2panumbseat, -pf_party_id)%>%
distinct()
df_enp <- merge(df_col1, enp, by.x = c('year.x','ccodecow'), by.y = c('year','COWcode'))%>%
select(-v2panumbseat, -pf_party_id)%>%
distinct()
df_enp_m1 <- multinom(ENPP ~ ELF + PSI + housesys + col_legacy + dem + oil.x + edu, data = df_enp)
summary(df_enp_m1)
stargazer(df_enp_m1, type="text")
stargazer(df_enp_m1, type="text")
df_enp_m1 <- lm(ENPP ~ ELF + PSI + housesys + col_legacy + dem + oil.x + edu, data = df_enp)
summary(df_enp_m1)
df_enp_m1 <- lm(ENPP ~ ELF + PSI + housesys + col_legacy + dem + oil.x + edu, data = df_enp)
df_enp_m2 <- lm(ENPP ~ ELF + PSI + housesys + col_legacy + dem + oil.x + edu, data = df_enp)
df_enp_m2 <- lm(ENPP ~ ELF + PSI + housesys + col_legacy, data = df_enp)
summary(df_enp_m2)
df_enp_m2 <- lm(ENPP ~ ELF+ housesys + col_legacy + dem + oil.x + edu, data = df_enp)
summary(df_enp_m2)
stargazer(df_enp_m2, type="text")
library(haven)
library(psych)
library(dplyr)
library(ggplot2)
library(glm.predict)
library(questionr)
library(DAMisc)
library(erer)
# open data (CDA_lab1.dta)
lits <- read_dta(file.choose())
# open data (CDA_lab1.dta)
lits <- read_dta(file.choose())
# open data (CDA_lab1.dta)
lits <- read_dta(file.choose())
df <- readRDS('df.RDS')
str(df)
df$ccodecow <- as.character(df$ccodecow)
df$year <- as.character(df$year.x)
df$edu <- as.numeric(df$edu)
df$partyreg <- as.numeric(df$partyreg)
df$partyreg <- factor(df$partyreg)
df1 <- df
View(df1)
df <- readRDS('df.RDS')
df$ccodecow <- as.character(df$ccodecow)
df$year <- as.character(df$year.x)
df$edu <- as.numeric(df$edu)
df$partyreg <- factor(df$partyreg)
df1 <- df
summary(df1)
load("~/Coursework/workspace_all.RData")
df_col <- Reduce(function(x,y) merge(x = x, y = y, by = "ccodecow", all.x = TRUE, all.y = FALSE),
list(partyreg, ELF_df, PSI_df, col_legacy_df, rules_df, dem_df, edu_df, oil_df))
library(electoral)
library(dplyr)
library(foreign)
library(haven)
library(tidyr)
library(rlang)
library(dplyr)
EPR <- read.csv('EPR.csv')
ELF_df <- merge(partyreg, EPR, by.x = 'ccodecow', by.y = 'gwid',all.x = TRUE, all.y = FALSE) %>%
group_by(statename, ccodecow)%>%
filter(if_else(year == 2018, to == 2017, year >= from & year <= to))%>%
mutate(ELF = as.numeric(1 - sum(size^2)))%>%
summarise(ELF)
df_col <- Reduce(function(x,y) merge(x = x, y = y, by = "ccodecow", all.x = TRUE, all.y = FALSE),
list(partyreg, ELF_df, PSI_df, col_legacy_df, rules_df, dem_df, edu_df, oil_df))
col_legacy_df <- col_legacy1 %>%
group_by(ccodecow)%>%
select(ccodecow, rCNAME, dCNAME,colony)%>%
mutate(col_legacy = if_else(colony == 1, if_else(dCNAME == 'UK', 1, if_else(dCNAME == 'FRN', 2, 3)),0))%>%
summarize(max(col_legacy))
col_legacy1 <- merge(partyreg, col_legacy, by.x = 'ccodecow', by.y = 'rCCODE', all.x = TRUE, all.y = FALSE)
col_legacy1 <- merge(partyreg, col_legacy, by.x = 'ccodecow', by.y = 'rCCODE', all.x = TRUE, all.y = FALSE)
col_legacy_df <- col_legacy1 %>%
group_by(ccodecow)%>%
select(ccodecow, rCNAME, dCNAME,colony)%>%
mutate(col_legacy = if_else(colony == 1, if_else(dCNAME == 'UK', 1, if_else(dCNAME == 'FRN', 2, 3)),0))%>%
summarize(max(col_legacy))
View(col_legacy1)
col_legacy1 <- merge(partyreg, col_legacy, by.x = 'ccodecow', by.y = 'rCCODE', all.x = TRUE, all.y = FALSE)
View(col_legacy)
col_legacy <- read_dta('Colonal/colony-dummy.dta')
col_legacy1 <- merge(partyreg, col_legacy, by.x = 'ccodecow', by.y = 'rCCODE', all.x = TRUE, all.y = FALSE)
col_legacy_df <- col_legacy1 %>%
group_by(ccodecow)%>%
select(ccodecow, rCNAME, dCNAME,colony)%>%
mutate(col_legacy = if_else(colony == 1, if_else(dCNAME == 'UK', 1, if_else(dCNAME == 'FRN', 2, 3)),0))%>%
summarize(max(col_legacy))
col_legacy_df <- col_legacy1 %>%
group_by(ccodecow)%>%
select(ccodecow, rCNAME, dCNAME, colony)%>%
mutate(col_legacy = if_else(colony == 1, if_else(dCNAME == 'UK', 1, if_else(dCNAME == 'FRN', 2, 3)),0))%>%
summarize(max(col_legacy))
View(col_legacy1)
col_legacy_df <- col_legacy1 %>%
group_by(ccodecow)%>%
select(ccodecow, rCNAME, dCNAME, colony)%>%
mutate(col_legacy = if_else(colony == 1, if_else(dCNAME == 'UK', 1, if_else(dCNAME == 'FRN', 2, 3)),0))%>%
summarize(max(col_legacy))
col_legacy_df <- col_legacy1 %>%
group_by(ccodecow)
col_legacy_df <- col_legacy1 %>%
group_by(ccodecow)%>%
select(ccodecow, rCNAME, dCNAME, colony)
View(col_legacy1)
col_legacy_df <- col_legacy1 %>%
group_by(ccodecow)%>%
dplyr::select(ccodecow, rCNAME, dCNAME, colony)%>%
mutate(col_legacy = if_else(colony == 1, if_else(dCNAME == 'UK', 1, if_else(dCNAME == 'FRN', 2, 3)),0))%>%
summarize(max(col_legacy))
rules <- as.data.frame(rules)
save.image("~/Coursework/model.RData")
df_col <- Reduce(function(x,y) merge(x = x, y = y, by = "ccodecow", all.x = TRUE, all.y = FALSE),
list(partyreg, ELF_df, PSI_df, col_legacy_df, rules_df, dem_df, edu_df, oil_df))
df_col$ccodecow <- as.character(df_col$ccodecow)
df_col$year.x <- as.character(df_col$year.x)
df_col$edu <- as.numeric(df_col$edu)
df_col1 <- df_col %>%
subset(., select = which(!duplicated(names(.))))%>%
select(ccodecow, country_name.x, country_text_id.x, year.x, partyreg, ELF, PSI = v2xps_party, housesys, dem = v2x_polyarchy, oil.x, edu, col_legacy = `max(col_legacy)`)%>%
distinct()%>%
mutate_all(~replace(., is.na(.), 0))
df_col1 <- df_col %>%
subset(., select = which(!duplicated(names(.))))%>%
dplyr::select(ccodecow, country_name.x, country_text_id.x, year.x, partyreg, ELF, PSI = v2xps_party, housesys, dem = v2x_polyarchy, oil.x, edu, col_legacy = `max(col_legacy)`)%>%
distinct()%>%
mutate_all(~replace(., is.na(.), 0))
df_col1[df_col1$ccodecow== 403, "ELF"] <- 0.189797
df_col1[df_col1$ccodecow== 591, "ELF"] <- 0.3028665
df_col1[df_col1$ccodecow== 402, "ELF"] <- 0.4949435
df_col1$col_legacy.f <- factor(df_col1$col_legacy)
df_col1$partyreg <- factor(df_col1$partyreg)
df_col1 < df
df_col1 <- df
df_col1 <- df_col %>%
subset(., select = which(!duplicated(names(.))))%>%
dplyr::select(ccodecow, country_name.x, country_text_id.x, year.x, partyreg, ELF, PSI = v2xps_party, housesys, dem = v2x_polyarchy, oil.x, edu, col_legacy = `max(col_legacy)`)%>%
distinct()%>%
mutate_all(~replace(., is.na(.), 0))
df_col1[df_col1$ccodecow== 403, "ELF"] <- 0.189797
df_col1[df_col1$ccodecow== 591, "ELF"] <- 0.3028665
df_col1[df_col1$ccodecow== 402, "ELF"] <- 0.4949435
df_col1$col_legacy.f <- factor(df_col1$col_legacy)
df_col1$partyreg <- factor(df_col1$partyreg)
df<- df_col1
install.packages('caret')
library(caret)
library(caret)
set.seed(41)
library(nnet)
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu, data = df,
method = 'mlogit'.trControl = trainControl(method = 'cv', number = 10, verboseIter = TRUE)
)
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu, data = df,
method = 'mlogit', .trControl = trainControl(method = 'cv', number = 10, verboseIter = TRUE)
)
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu, data = df,
method = 'multinom', .trControl = trainControl(method = 'cv', number = 10, verboseIter = TRUE)
)
library(mlogit)
# No data partitioning due to small n
#
# Re-label values of outcomes
str(df)
df$partyreg[df$partyreg==0] <- 'non-dominant'
df$partyreg[df$partyreg==1] <- 'autocratic dominant'
df$partyreg[df$partyreg==2] <- 'democratic dominant'
View(df)
View(df_col1)
df$partyreg <- as.numeric(df$partyreg)
df$partyreg[df$partyreg==0] <- 'non-dominant'
df$partyreg[df$partyreg==1] <- 'autocratic dominant'
df$partyreg[df$partyreg==2] <- 'democratic dominant'
df_col1$partyreg <- factor(df_col1$partyreg)
df$partyreg <- factor(df$partyreg)
View(df)
df$partyreg <- as.numeric(df$partyreg)
df$partyreg[df$partyreg==0] <- 'non-dominant'
df$partyreg[df$partyreg==1] <- 'autocratic dominant'
df$partyreg[df$partyreg==2] <- 'democratic dominant'
View(df)
df<- df_col1
df$partyreg <- as.numeric(df$partyreg)
df$partyreg[df$partyreg==0] <- 'non-dominant'
df$partyreg[df$partyreg==1] <- 'autocratic dominant'
df$partyreg[df$partyreg==2] <- 'democratic dominant'
View(df)
View(df_col1)
df$partyreg <- as.numeric(df$partyreg)
df<- df_col1
df$partyreg <- as.numeric(df$partyreg)
View(df)
View(df)
View(df_col1)
df$partyreg[df$partyreg==1] <- 'non-dominant'
df$partyreg[df$partyreg==2] <- 'autocratic dominant'
df$partyreg[df$partyreg==3] <- 'democratic dominant'
df$partyreg <- as.factor(df$partyreg)
View(df)
# Set a random seed
set.seed(41)
cntrlspecs <- trainControl(method = 'cv', number = 5,
savePredictions = 'all',
classProbs = TRUE)
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs)
)
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
cntrlspecs <- trainControl(method = 'cv', number = 4,
savePredictions = 'all',
classProbs = TRUE)
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
cntrlspecs <- trainControl(method = 'cv', number = 10,
savePredictions = 'all',
classProbs = TRUE)
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
cntrlspecs <- trainControl(method = 'cv', number = 5,
savePredictions = 'all',
classProbs = TRUE)
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
# Set a random seed
set.seed(1)
cntrlspecs <- trainControl(method = 'cv', number = 5,
savePredictions = 'all',
classProbs = TRUE)
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
summary(model41)
stargazer::stargazer(model41,'text')
stargazer::stargazer(model41,'text')
model <- multinom <-(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df)
model <- multinom(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu, data = df)
summary(model)
stargazer::stargazer(mode,'text')
stargazer::stargazer(model,'text')
stargazer::stargazer(model,type = 'text')
# Predictor importance
varImp(model)
# Predictor importance
varImp(model)
# Predictor importance
varImp(model41)
predictions <- predict(model41, df)
predictions
df$partyreg
confusionMatrix(data = predictions, df$partyreg)
df$partyreg1 <- relevel(df$partyreg, ref = '1')
df$partyreg1 <- relevel(df$partyreg, ref = 'non-dominant')
# Specify the model
model41 <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
summary(model41)
# Predictor importance
varImp(model41)
#
predictions <- predict(model41, df)
confusionMatrix(data = predictions, df$partyreg)
# Specify the model
model41 <- train(partyreg1 ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
summary(model41)
#
predictions <- predict(model41, df)
confusionMatrix(data = predictions, df$partyreg)
df$partyreg1 <- relevel(df$partyreg, ref = 'democratic dominant')
# Specify the model
model41 <- train(partyreg1 ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
summary(model41)
predictions <- predict(model41, df)
confusionMatrix(data = predictions, df$partyreg)
# Predictor importance
varImp(model41)
df$partyreg1 <- relevel(df$partyreg, ref = 'non-dominant')
# Specify the model
model41 <- train(partyreg1 ~ ELF + PSI + housesys + col_legacy.f + dem + oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
summary(model41)
# Predictor importance
varImp(model41)
#
predictions <- predict(model41, df)
confusionMatrix(data = predictions, df$partyreg)
# Specify the model
model41 <- train(partyreg1 ~ ELF + PSI + housesys + col_legacy.f+ oil.x + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
summary(model41)
# Predictor importance
varImp(model41)
#
predictions <- predict(model41, df)
confusionMatrix(data = predictions, df$partyreg)
# Specify the model
model41 <- train(partyreg1 ~ ELF + PSI + housesys + col_legacy.f + dem + edu,
data = df,
method = 'multinom',
.trControl = cntrlspecs
)
print(model41)
summary(model41)
#
predictions <- predict(model41, df)
confusionMatrix(data = predictions, df$partyreg)
library(nnet)
# Get predictions
model1 <- multinom(partyreg1 ~ ELF + PSI + housesys + col_legacy.f + dem + edu, data = df)
stargazer::stargazer(model1)
stargazer::stargazer(model1, type = 'text')
View(df)
library(dplyr)
library(caret)
library(nnet)
library(mlogit)
library(car)
library(corrplot)
library(DescTools)
library(stargazer)
library(nnet)
stargazer(df)
stargazer(df, title = 'Data Descriptive Statistics', summary = TRUE,
out = 'summary.txt', omit = 'ccodecow', 'country_name.x',
'country_text_id.x','year.x', 'partyreg','housesys', 'col_legacy',
'col_legacy.f', 'partyreg1')
stargazer(df, title = 'Data Descriptive Statistics', summary == TRUE,
out = 'summary.txt', omit = 'ccodecow', 'country_name.x',
'country_text_id.x','year.x', 'partyreg','housesys', 'col_legacy',
'col_legacy.f', 'partyreg1')
stargazer(df, title = 'Data Descriptive Statistics', summary = TRUE,
out = 'summary.txt', omit = 'ccodecow', 'country_name.x',
'country_text_id.x','year.x', 'partyreg','housesys', 'col_legacy',
'col_legacy.f', 'partyreg1')
stargazer(df, type = 'text', title = 'Data Descriptive Statistics', summary = TRUE,
out = 'summary.txt', omit = 'ccodecow', 'country_name.x',
'country_text_id.x','year.x', 'partyreg','housesys', 'col_legacy',
'col_legacy.f', 'partyreg1')
stargazer(df, type = 'text', title = 'Data Descriptive Statistics', summary = TRUE,
out = 'summary.txt', omit = 'ccodecow', 'country_name.x',
'country_text_id.x','year.x', 'partyreg','housesys', 'col_legacy',
'col_legacy.f', 'partyreg1', summary.logical = FALSE)
stargazer(df, type = 'text', title = 'Data Descriptive Statistics', summary = TRUE,
out = 'summary.txt', summary.logical = FALSE)
df <- df %>%
select_(-col_legacy)
df$col_legacy <- factor(df$col_legacy)
df$housesys <- factor(df$housesys)
df$oil <- factor(df$oil.x)
stargazer(df, type = 'text', title = 'Data Descriptive Statistics', summary = TRUE,
out = 'summary.txt', summary.logical = FALSE)
df$oil <- df$oil.x
df$oil <- factor(df$oil)
stargazer(df, type = 'text', title = 'Data Descriptive Statistics', summary = TRUE,
out = 'summary.txt', summary.logical = FALSE)
# Re level the dependent varible with reference - 'non-dominant'
df$partyreg <- relevel(df$partyreg, ref = 'non-dominant')
# Specify parameters
cntrlspecs <- trainControl(method = 'cv', number = 5,
savePredictions = 'all',
classProbs = TRUE)
# Set a random seed
set.seed(1845)
# Specify the model
model_k <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + oil.x + inc + dem + edu,
data = df, Hess = TRUE,
method = 'multinom',
.trControl = cntrlspecs
)
View(df)
# Specify the model
model_k <- train(partyreg ~ ELF + PSI + housesys + col_legacy.f + oil.x + dem + edu,
data = df, Hess = TRUE,
method = 'multinom',
.trControl = cntrlspecs
)
# Goodness-of-fit
print(model_k)
summary(model_k)
# Predictor importance
varImp(model_k)
# Predictor importance
varImp(model_k)
# Get predictions
predictions <- predict(model_k, df)
confusionMatrix(data = predictions, df$partyreg)
library(MASS)
library(effects)
plot(Effect('PSI', model1))
ggplot(model1, aes(x = partyreg, y = PSI, colour = ses)) +
geom_line() + facet_grid(variable ~ ., scales="free")
ggplot(df, aes(x = partyreg, y = PSI, colour = ses)) +
geom_line() + facet_grid(variable ~ ., scales="free")
View(df)
ggplot(df, aes(x = partyreg, y = PSI, colour = ses)) +
geom_line() + facet_grid(variable ~ ., scales="free")
ggplot(df, aes(x = partyreg, y = PSI, colour = ses)) +
geom_line() + facet_grid(variable ~ partyreg, scales="free")
ggplot(df, aes(x = partyreg, y = PSI, colour = ses)) +
geom_line() + facet_grid(partyreg ~ ., scales="free")
exp(coef(model1))
head(pp <- fitted(model1))
dwrite <- data.frame(ses = rep(c("non-dominant", "autocratic dominant", "democratic dominant"), each = 41), write = rep(c(30:70),
3))
pp.write <- cbind(dwrite, predict(model1, newdata = dwrite, type = "probs", se = TRUE))
ggplot(df, aes(x = partyreg, y = PSI, colour = ses)) + geom_line() + facet_grid(variable ~
., scales = "free")
plot(allEffects(model1))
plot(allEffects(df))
# Extract results
stargazer::stargazer(model1, type = 'latex', out = 'out.tex')
str(df)
View(df)
load("C:/Users/Stepan Polikanov/Documents/GitHub/domparty/old/starting_dataset.RData")
df <- readRDS('df.RDS')
View(df)
